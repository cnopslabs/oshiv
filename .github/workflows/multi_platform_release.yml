name: Multi-Platform Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        default: ''

  push:
    tags:
      - 'v*'

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set release tag environment variable
        id: set_release_tag
        run: echo "RELEASE_TAG=${{ github.event.inputs.tag || github.ref_name }}" >> $GITHUB_ENV

      - name: Set up Git and check/create tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            git fetch --all --tags
            if ! git rev-parse ${{ github.event.inputs.tag }} >/dev/null 2>&1; then
              echo "Tag ${{ github.event.inputs.tag }} does not exist. Creating it now..."
              git tag ${{ github.event.inputs.tag }}
              git push origin ${{ github.event.inputs.tag }}
            else
              echo "Tag ${{ github.event.inputs.tag }} already exists. Checking out..."
              git checkout ${{ github.event.inputs.tag }}
            fi
          fi

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: Release ${{ env.RELEASE_TAG }}
          body: |
            Release ${{ env.RELEASE_TAG }} with binaries for all platforms.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

  build_and_upload:
    needs: create_release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set release tag environment variable
        id: set_release_tag
        run: echo "RELEASE_TAG=${{ needs.create_release.outputs.upload_url || github.ref_name }}" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      - name: Install Staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Install zip utility
        run: sudo apt-get install -y zip

      - name: Verify environment
        run: make check-env

      - name: Install dependencies
        run: go mod tidy

      - name: Compile binaries for all platforms
        env:
          VERSION: ${{ env.RELEASE_TAG }}
        run: |
          make clean
          make compile VERSION=${{ env.RELEASE_TAG }}

      - name: Debug - Check generated binaries
        run: ls -l build/

      - name: Compress binaries
        run: make zip

      - name: Debug - Check compressed files
        run: ls -l build/

      - name: Upload all binary assets to release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          if ls build/*.zip >/dev/null 2>&1; then
            for file in build/*.zip; do
              echo "Uploading $file"
              curl -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/zip" \
                --data-binary @"$file" \
                "${{ needs.create_release.outputs.upload_url }}?name=$(basename $file)";
            done
          else
            echo "No ZIP files found to upload."
          fi